# 계속 정점을 탐색해서 방문하지 않은 지점 중에 최소 거리를 찾는다
# 반복해서 탐색한다는 부분에서 개선할 수 있는 방법이 있다.
# 효율을 높이기 위해 우선순위 큐를 사용
# 그리디 알고리즘에 속한다(매 상황에서 방문하지 않은 가장 비용이 적은 노드를 선택)
# 한 번 처리된 노드의 최단 거리는 고정되어 더 이상 바뀌지 않는다.
# 우선순위 큐(우선순위가 가장 높은 데이터를 가장 먼저 삭제한다)-힙을 구한다
# 힙(heap)은 최소 힙과 최대 힙이 있다. 삽입이랑 삭제시간이 O(logN)이 필요하다
# 매 단계마다 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택하기 위해 힙 자료구조를 이용한다.
# 거리가 가장 짧은 노드를 구하기 위해서 힙에 원소를 넣을때 거리를 기준으로 해서 데이터를 넣음으로써 데이터가 짧은 순서부터 각 노드의 대한 정보가 나올 수 있도록 하여 수행시간을 더 빠르게 만들 수 있다.
# 가장 가까운 노드를 저장해 놓기 위해서 힙 자료구조를 추가적으로 이용한다는 점이 다르다.
# 현재의 최단 거리가 가장 짧은 노드를 선택해야 하므로 최소 힙을 사용한다.
# 갱신이 일어날때마다 큐에 해당 갱신된 노드에 대한 정보만 넣어준다.
# 우선순위 큐에 넣을때는 거리값이 갱신된 노드에 대한 정보를 기준으로 넣어줄 수 있도록 한다.
# 꺼낸 원소의 거리 값이 현재 테이블에 기록된 거리값보다 이미 더 크다면 이미 방문 처리가 된 노드로 간주할 수 있다.
# 인접리스트(정점,간선)
graph = [
    [(1, 5), (2, 7), (3, 3)],
    [(0, 5), (2, 1), (4, 4)],
    [(0, 7), (1, 1), (3, 2), (4, 3)],
    [(0, 3), (2, 2)],
    [(1, 4), (2, 3)],
]
